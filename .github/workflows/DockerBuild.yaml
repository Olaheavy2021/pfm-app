name: .NET Aspire Samples CI

on:
  push:
    branches: [main]
    paths-ignore:
      - "**/*.md"
      - "**/*.gitignore"
      - "**/*.gitattributes"

  pull_request:
    paths-ignore:
      - "**/*.md"
      - "**/*.gitignore"
      - "**/*.gitattributes"

  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0.x"

concurrency:
  # Use github.run_id on main branch
  # Use github.event.pull_request.number on pull requests, so it's unique per pull request
  # Use github.ref on other branches, so it's unique per branch
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_id || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    name: Build & Test
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
      DOTNET_MULTILEVEL_LOOKUP: false
      DOTNET_INSTALL_DIR: ${{ matrix.os == 'ubuntu-latest' && '' || 'dotnet' }}
      ASPIRE_ALLOW_UNSECURED_TRANSPORT: true
      SuppressNETCoreSdkPreviewMessage: true
      DCP_DIAGNOSTICS_LOG_LEVEL: "debug"

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Add .NET global tools to PATH
        run: echo "${{ env.HOME }}/.dotnet/tools" >> $GITHUB_PATH

      - name: Install Docker (latest version)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-docker-action@b60f85385d03ac8acfca6d9996982511d8620a19 #v4.3.0

      - name: Install Azure Functions Core Tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install azure-functions-core-tools-4

      - name: Print .NET info
        run: dotnet --info

      - uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: "20.x"

      - name: Install & trust dev-certs
        id: install-dev-certs
        if: matrix.os == 'ubuntu-latest'
        run: | 
          dotnet dev-certs https --clean
          dotnet dev-certs https --trust

      - name: Install coverage tools
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet tool install --global dotnet-coverage

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-restore --verbosity normal

      - name: Run tests with coverage, logging & blame
        id: test
        if: matrix.os == 'ubuntu-latest'
        run: |
          dotnet coverage collect \
          --output ${{ github.workspace }}/Tests/Coverage \
          --output-format cobertura \
          --settings CodeCoverage.runsettings \
          -- dotnet test \
          --logger console \
          --logger trx \
          --logger html \
          --logger GitHubActions \
          --results-directory ./TestResults \
          --blame \
          -- RunConfiguration.CollectSourceInformation=true

      - name: Copy DCP logs
        if: (success() || steps.test.conclusion == 'failure') && matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p ./TestResults/DCPLogs
          cp -r /tmp/dcp/logs/* ./TestResults/DCPLogs

      - name: Publish Test Results
        if: (success() || steps.test.conclusion == 'failure') && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: TestResults_${{ matrix.os }}
          path: ./TestResults

      - name: Generate coverage report
        run: |
          reportgenerator \
            -reports:${{ github.workspace }}/Tests/Coverage \
            -targetdir:${{ github.workspace }}/Tests/coveragereport \
            -reporttypes:Html

      - name: Upload code coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coveragereport
          path: ${{ github.workspace }}/Tests/coveragereport
